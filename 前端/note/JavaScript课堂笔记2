JavaScript入门篇

一、介绍：
	
	1.JavaScript是一种专门在浏览器编译并运行的编程语言

	2.JavaScript处理用户与浏览器之间请求问题

	3.JavaScript采用【弱类型编程语言风格】对【面向对象思想】来进行实现的编程语言

		* 弱类型编程语言风格 VS 强类型编程语言风格

			- 强类型编程语言风格：认为对象行为应该受到其修饰类型严格约束。Java 采用【强类型编程语言风格】对【面向对象思想】进行实现的编程语言
				Class Student{
					public String sname;
					public void sayHello(){
						System.out.println("hello world");
					}
				}
				Student student = new Student();
				student.sname = "mike"; student对象能够调用属性只有sname
				student.sayHello(); 	student对象能够调用方法只有sayHello()
				student.sid = 10; // 在Java认为是语法错误的，修饰student对象的Student类型没有这提供这个属性

			- 弱类型编程语言风格：认为对象行为不应该受到其修饰类型约束。可以根据实际需求来决定对象可以调用属性和方法。JavaScript采用【弱类型编
			程语言风格】对【面向对象思想】来进行实现的编程语言

				var stu = new Object(); // stu对象相当于【阿Q】
				stu.car = "劳斯莱斯"; // 合法
				stu.play = function(){
					return "天天打游戏";
				}
				stu.play();
	
二、JavaScript变量声明方式：
	
	1.命令格式：
		var 变量名;
		var 变量名 = 值;
		var 变量名1,变量名2 = 值;

	2.注意：
		在JavaScript变量/对象，声明不允许指定【修饰类型】，只能通过var来进行修饰

三、JavaScript中标识符命名规则：
	
	1.标识符只能由四种符号组成，英文字母，数字，下划线(_)，美元符号($)
	2.标识符首字母不能以"数字"开头
	3.标识符不能采用JavaScript关键字比如 var

四、JavaScript数据类型:

	1.分类：
		* 基本数据类型 
			- 数字类型(number)：JavaScript中将整数与小数合称为number类型

			- 字符串类型(string)：JavaScript中字符与字符串合称为string类型，JavaScript字符或者字符串既可以使用''又可以使用""

			- 布尔类型(boolean)：JavaScript中boolean类型只有true或者false

		* 高级引用数据类型
			- object类型：JavaScript所有通过【构造函数】生成的对象都是object类型

			- function类型：相当于Java中(java.lang.reflect.Method)，JavaScript所有函数都是function类型

	*****JavaScript是弱类型编程语言，根据变量赋值内容来判断变量数据类型
	*****JavaScript中变量的数据类型可以根据赋值内容来进行动态改变

五、JavaScript中特殊【值】

	1.undefined：
		JavaScript中所有变量在没有赋值时，其默认值都是undefined
		由于JavaScript根据变量的赋值来判断变量类型，此时由于变量没有赋值因此
		JavaScript无法判断当前变量数据类型，此时返回也是undefined，因此初学者将
		undefined也理解为是一种数据类型这种理解是错误的

	2.null：
		JavaScript中当一个对象赋值为null时，表示对象引用了一个【空内存】，这个空
		内存既不能存储数据也不能读取数据。此时这个对象数据类型，在JavaScript依然
		认为是Object类型

	3.NaN：
		JavaScript中当一个变量被赋值为NaN，表示变量接受了一个【非法的数字】(123 合法数字 abc123 非法数字)
		此时这个变量数据类型，在JavaScript依然认为number类型

	4.infinity：
		JavaScript中当一个变量赋值为infinity，表示变量接受了一个【无穷大数字】，此时这个变量数据类型，在JavaScript依然认为number类型

六、JavaScript中控制语句
	
	JavaScript控制语句与Java中控制语句语法格式完全一致

七、JavaScript中函数声明方式
	
	1.命令格式：
		function 函数名(形参名1,形参名2){
			JavaScript命令行
			JavaScript命令行
			
			return 将函数运行结果进行返回
		}

	2.注意：
		* JavaScript中，所有函数在声明时，都需要使用finction进行修饰
		* JavaScript中，所有函数在声明时，禁止指定函数返回数据类型
		* JavaScript中，所有函数在声明时，形参既不能使用var来修饰也不能使用数据类型修饰
		* JavaScript中，所有函数在声明时，如果有返回值，此时应通过return进行返回

八、JavaScript函数调用方式：
	
	1.浏览器并不会自动调用JavaScript函数
	2.可以通过命令行方式来调用JavaScript函数
	3.通过绑定在HTML标签上监听事件通知浏览器调用指定函数进行处理

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript应用篇

一、JavaScript作用：
	帮助浏览器对用户提出请求进行处理

二、DOM对象：

	1.DOM = Document Object Model（文档模型对象）

	2.JavaScript不能直接操作HTML标签，只能通过HTML标签关联的DOM对象对HTML标签下达指令

	3.DOM对象生命周期：
		* 浏览器在接收到html文件之后，将HTML文件标签加载到浏览器缓存中，每当加载一个html标
		签时候，自动为这个标签生成一个实例对象，这个实例对象就是DOM对象

		* 在浏览器关闭之前或者浏览器请求其他资源文件之前，本次生成的DOM对象一直存在在浏览器
		的缓存中

		* 在浏览器关闭时，浏览器缓存中dom对象将要被销毁

		* 在浏览器请求到新资源文件后，浏览器缓存中原有的dom对象将会被覆盖

三、document对象：
	
	1.document对象被称为【文档对象】

	2.document对象用于在浏览器内存中根据定位条件定位DOM对象

	3.document对象生命周期：
		* 在浏览器将网页中所有标签加载完毕后，在内存中将使用【树形结构】存储这些DOM对象。在树形
		结构生成完毕后由浏览器生成一个document对象管理这棵树（DOM树）
		——在浏览器将接收网页中标签加载完毕后，自动在浏览器内存生成一个doucment对象

		* 一个浏览器运行期间，只会生成一个document对象

		* 在浏览器关闭时，负责将document对象进行销毁

四、通过document对象定位DOM对象方式：
	
	1.根据html标签的id属性值定位DOM对象
		命令格式：
			var domObj = document.getElementById("id属性值");


	2.根据html标签的name属性值定位DOM对象
		命令格式：
			var domArray = doucument.getElementsByName("name属性值");

	3.根据html标签类型定位DOM对象
		命令格式：
			var domArray = document.getElementsByTagName("标签类型名");

五、DOM对象对HTML标签属性操作
	
	1.DOM对象对标签value属性进行取值与赋值操作
		* 取值操作：
			var domObj = document.getElementById("one");
			var num = domObj.value;
		* 赋值操作：
			var domObj = document.getElementById("one");
			domObj.value = "abc";

	2.DOM对象对标签【样式属性】进行取值与赋值操作
		* 取值操作：
			var domObj = document.getElementById("one");
			// 读取当前标签【背景颜色属性】值
			var color = douObj.style.背景颜色属性
		* 赋值操作：
			var domObj = document.getElementById("one");
			// 通过DOM对象对标签中【背景颜色属性值】进行赋值
			domObj.style.背景颜色属性值 = 值;

	3.DOM对象对标签中【状态属性】进行取值与赋值操作
		状态属性：
			状态属性的值都是boolean类型
			disabled = true; 表示当前标签不可以使用
			disabled = false; 表示当前标签可以使用

			checked:只存在于radio标签与checkbox标签
			checked = true; 表示当前标签被选中
			checked = false; 表示当前标签未被选中

		* 取值操作：
			var domObj = document.getElementById("one");
			var num = domObj.checked;

		* 赋值操作：
			var domObj = document.getElementById("one");
			domObj.checked = true;

	4.DOM对象标签中【文字显示内容】进行赋值与取值

		文字显示内容：
			只存在于双目标签之间:<tr>100<tr/>

		* 取值操作：
			var domObj = document.getElementById("one");
			var num1 = domObj.innerText;

		* 赋值操作：
			var domObj = document.getElementById("one");
			domObj.innerText = 值;

		innerText与innerHTML区别：

			innerText与innerHTML都可以对标签文字显示内容属性进行赋值与取值

			innerText只能接受字符串
			innerHTML既可以接受字符串又可以接受html标签


六、JavaScript监听事件
	
	1.监听事件：
		监听用户在何时以何种方式对当前标签进行操作，当监听到相关行为
		时，通知浏览器调用对应JavaScript函数对当前用户请求进行处理

	2.监听事件分类：

		* 监听用户何时使用鼠标操作当前标签
			_ onclick：监听用户何时使用鼠标【单击】当前标签
			- onmouseover：监听用户何时将鼠标【悬停】当前标行·签
			- onmouseout：监听用户何时将鼠标从当前标签上方【移开】
			- onfocus：监听用户何时通过鼠标让当前标签获得【光标】
			- onblur：监听用户何时通过鼠标让当前标签丢失【光标】

		* 监听用户如何使用键盘操作当前标签
			- onkeydown：监听用户何时在当前标签上【按下键盘】
			- onkeyup：监听用户何时在当前标签上【弹起键盘】

七、onload监听事件：
	
	1.作用：
		监听浏览器何时将网页中HTML标签加载完毕

	2.意义：
		浏览器每加载一个HTML标签时，自动在内存生成一个dom对象。在浏览器将网页
		所有标签加载完毕时，意味当前网页中所有标签都生成对应DOM对象。onload此时就可以
		触发调用函数对浏览器中标签进行处理，此时不会出现未找到DOM对象问题

	3.使用:
		<script type="text/javascript">
			function fun1(){
				window.alert("fun1 is run");
			}
		<script/>

		<body onload="fun1()">

		<body/>

八、基于DOM对象实现监听事件与HTML标签之间绑定
	
	1.前提：
		实际开发过程中，同一个监听事件往往与多个HTML标签进行绑定，这样增减开发强度，在未来
		维护过程中增加维护难度

	2.命令形式：
		domObj.监听事件名称 = 处理函数名称; ——此处处理函数名称后面时不能出现()——

	3.举个例子：
		var domObj = document.getElementById("one");
		domObj.onclick = fun1; // 注意函数名后面不能有()

		相当于

		<input type="butto" id="one" onclick="fun1()"/> // 此处函数名后面必须有()

------------------------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript 高级篇

一、arguments：
	
	1.JavaScript，每一个函数都包含一个arguments属性
	2.argyments属性是一个数组
	3.在函数调用时，将实参传入到函数的arguments中国呢，再由atguments将数据传递给形参
	4.arguments属性存在，可以将JavaScript中函数在调用时传递实参与形参进行格式，增加函数调用灵活性
	5.arguments属性只能在函数体内进行使用，不能在函数体外进行相关的使用

二、function类型对象

	1.介绍：
		* function时JavaScript中一种高级数据类型
		* 一个function类型对象用于管理一个具体函数
		* JavaScript中function类型相当于Java中Method类型

	2.function类型对象声明方式：
		* 标准声明方式
			function 函数对象名称(参数1,参数2,){
				命令;
			}

		* 匿名声明方式
			var 函数对象名称 = function (参数1,参数2){
				命令;
			}

	3.function类型对象的创建时机
		浏览器在加载<script>标签时，共加载两次。

		第一次加载时，将<script>标签所有以标准形式声明函数对象进行相关的创建
		第二次加载时，将<script>标签所有命令行按照自上而下顺序来执行

三、局部变量与全局变量
	
	1.局部变量：
		* 定义：在函数执行体内，通过var修饰符声明的变量

			function fun1(){
				var name = "mike"; // 局部变量
			}

		* 特征：局部变量只能在当前函数执行体使用，不能在函数执行体外使用

	2.全局变量：
		* 定义：
			- 全局变量可以在当前HTML文件中所有的函数中使用
			- 全局变量被声明时，自动分配给window对象作为其属性
			声明全局变量：

				第一种方式：直接在script标签下，通过var声明的变量，就是全局变量。

				第二种方式：在函数执行体内，没有通过var修饰符修饰的变量也是全局变量。

四、object类型对象特征：
	
	1.【定义】：在JavaScript认为所有通过【构造函数】生成对象其数据类型都是Object类型

	2.【特征】：object类型对象在创建完毕后，可以根据实际情况，任意添加属性和方法，也可以移除属性和方法

	3.【属性维护】：
		
		第一种维护方案：
			添加属性
				object对象.新属性名 = 值;
			添加函数
				object对象.新函数对象名 = function(){};
   		
   		第二种维护方案：
   			添加属性
   				object对象["新属性名字"] = 值;
   			添加函数
   				object对象["新函数对象名称"] = function() {};

   		移除对象属性和方法：
   			delete object.属性名;
   			delete object.函数名;

五、自定义构造函数

	1.【命令】：
		function 函数对象名称(){

		}

	2.【调用】：
		var object类型对象 = new 函数对象名();

	3.【普通函数与构造函数区分】：
		* 函数没用调用之前，无法区分函数身份，只能根据函数调用形式区分
			- 判断普通函数：var num = 函数对象名();
			- 判断构造函数：var num = new 函数对象名();
		* 返回值：
			- 普通函数运行后需要通过return将执行结果返回
			- 构造函数运行后，直接返回一个object类型对象，此时函数中return相当于无效

六、JavaScript中this指向问题：
	
	1.JavaScript中this指向与Java中this指向完全是一致的。
		* 在构造函数中this指向当前构造函数生成object类型对象
		* 在普通函数，this指向调用当前函数的实例对象。
		
七、JSON：
	
	1.前提：JavaScript中得到object类型对象方式
		* 方式1:由构造函数生成的对象都是object类型对象
		* 方式2:由JSON数据描述格式生成对象都是object类型对象

	2.JSON数据描述格式：
		JavaScript中获得object类型对象简化版
			-命令格式：
				var obj = {"属性名1":值,"属性名2":值};

				开发人员习惯将由JSON生成的object类型对象称为【JSON对象】

	3.JSON数组：
		专门存放JSON对象的数组别称为JSON数组
		
