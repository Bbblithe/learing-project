
spring:诞生于2002年，解决企业开发的难度。减轻对项目模块之间的管理。
类与类之间的管理，帮组开发人员创建对象，管理对象之间的关系

spring核心技术：ioc ，aop。能实现模块之间，类之间的解耦合。
---------------------------------------------------------

（spring的第一个核心功能）IoC
IoC(Inversion of Control)：控制反转，是一个理论，概念，思想。
含义：把对象的创建，赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是由外部资源完成的。

控制：创建对象，对象的属性赋值，对象之间的关系管理
正转：有开发人员正在代码中，使用new构造方法创建对象，开发人员主动管理对象。
	public void main(String args[]){
		Student student = new Student(); //  在代码中，创建对象 --->正转
	}
反转：把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。由容器代替开发人员管理对象，创建对象，
给属性赋值。

容器：是一个服务器软件，一个框架（spring）
为什么要使用ioc：目的是减少对代码的改动，也能实现不同的功能，实现解耦合。

java中创建对象的方法：
	1.构造方法，new Student();
	2.反射
	3.序列化
	4.克隆
	5.ioc：容器创建对象
	6.动态代理

ioc的体现：
	servlet：
		- 创建类继承httpServlet
		- 在web.xml 注册servlet，使用<servlet-name> myservlet </servlet-name>
									<servlet-class>com.blithe.controller.MyServlet</servlet-class>
		- 没有创建Servlet都想，没有MyServlet myservlet = new Myservlet();
		- Servet是由tomcat服务器它给你创建的。Tomcat也称为容器
			Tomcat作为容器，里面存放的由servlet对象，Listener ，Filter对象

ioc的技术实现
	DI（dependence injection：依赖注入）是ioc的技术实现:只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建
	赋值，查找都有容器内部实现。

spring是一个容器，管理对象，给属性赋值，底层是反射创建对象。
--------------------------------------------------------
1.多个配置优势
	- 每个文件的大小比一个文件要小很多，效率高
	- 避免多人竞争带来的冲突

	如果你的项目有多个模块（相关的功能在一起），一个模块一个配置文件。
	学生考勤模块一个配置文件 ---- Andy管理
	学生成绩一个配置文件 ------- Blithe管理

	多文件的分配方式：
	1）按功能模块，一个模块一个配置文件
	2）按类的功能，数据库相关的配置一个文件配置，做事务的功能一个配置文件，做service功能的一个配置文件

2.基于注解的di：通过注解完成java对象的创建，属性赋值。
	- 使用注解的步骤：
		1）加入maven的溢奶 spring-context,在你加入spring-context的同时，间接加入spring-aop的依赖。
		   使用注解必须使用spring-aop依赖

		2）在类中加入spring的注解（多个不同功能的注解）

		3）在spring的配置文件中，渐入一个组件扫描器的标签，来说明注解在你的项目中的位置

		注解：
			* @Component
			* @Respotory
			* @Service
			* @Controller
			* @Value
			* @Autowired
			* @Resource

用户处理请求：
	用户from，参数name，age --- Servlet（接受请求name，age） --- Servlet（接受请求name，age） --- Service类（处理name，age等数据）
--------------------------------------------------------
aop

1.动态代理
	实现方法：
		- jdk动态代理，使用jdk中的Proxy，Method，InvocationHandler创建代理对象。
		jdk动态动态代理必须要求目标类实现接口

		- cglib动态代理，第三方的工具库，创建代理对象，原理是继承。通过继承目标类，创建子类。
		子类就是代理对象，要求目标类不能是final的方法也不能是final的

	动态代理的作用：
		- 在目标类源代码不改变的情况下，增加功能
		- 减少重复的代码
		- 专注于业务逻辑代码
		- 解耦合，让业务功能和日志，事务非业务功能分离。

2.AOP（Aspect Orient Programming-面向切面编程）：基于动态代理，可以使用jdk，cglib两种代理方式，AOP就是动态代理的规范化，
把动态代理的实现步骤，方法都定义好了，让开发人员用一种统一的方式，就用动态代理。

	Aspect：切面，给你的目标类增加的功能，就是切面。
		特点：一般都是非业务功能，独立使用
	Orient：面向，对着
	Programming：编程

	如何面向切面编程？	
		1）需要在分析项目功能的时候，找出切面
		2）合理的安排切面的执行时间（在目标方法前，还是在目标方法后）
		3）合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能

	术语：
		1）Aspect：切面，表示增强的功能，就是一堆代码，完成某一个功能，非业务功能，
				  常见的切面功能有日志，事务，统计信息，参数检查，权限验证。
		2）JoinPoint：连接点，链接业务方法和切面的位置。
		3）Pointcut：切入点，指多个连接点方法的集合。多个方法
		4）目标对象：给哪个类的方法增加功能，这个类就是目标对象
		5）Advice：通知，通知表示切面功能执行的时间

		切面(Aspect)三个关键的要素：
			- 切面的功能代码，切面干什么
			- 切面的执行位置，使用Pointcut表示切面执行的位置
			- 切面的执行之间，使用Advice表示时间在目标方法之前，还是目标方法之后

	AOP的实现：
		aop的技术实现框架：
		1）spring：spring在内部实现了aop规范，能做aop的工作。
			      spring主要在事务处理时使用了aop。
			      我们项目开发中很少使用spring的aop实现。因为spirng的aop比较繁琐

		2）aspectJ：一个开源的专门做aop的框架。spring框架中集成了aspectJ框架，通过spring就能使用aspectJ的功能。
			aspectJ框架实现aop有两种方式：
		   		- 使用xml的配置文件：配置全局事务
		   		- 使用注解（项目中常用,5个注解）

		   	aspectj框架的使用。
		   		- 切面的执行时间，这个执行时间在规范中叫做Advice（通知/增强）
		   			* @Before
		   			* @AfterReturning
		   			* @Around
		   			* @AfterThrowing
		   			* @After

		   		- 表示切面执行的位置，使用的是切入点表达式。
		   				切入点表达式：
		   				其中方法返回值 以及 方法声明(参数) 是必须含有的 
		   			* execution(访问权限 方法返回值 方法声明(参数) 异常类型)
		   			可以使用通配符：
		   				- * 0至多个字符
		   				- ..在方法参数中，表示任意多个参数，用在包名后表示当前包及子包
		   				例：excution(* com.blithe.service.*.*(..))

3.Mybatis和Spring集成（IOC技术）
	IOC技术原理：因为ioc能够创建对象，可以把mybatis框架中的对象交给spring统一创建，开发人员从spring中获取对象。
	开发人员就不用同时面对两个或多个框架，就只需使用spring

	mybatis使用步骤：
		- 定义dao接口，StudentDao
		- 定义mapper文件，StudentDao.xml
		- 定义mybatis的主配置文件 mybatis.xml
		- 创建dao的代理对象，StudentDao dao = SqlSessiong.getMapper(StudentDao.class);
		List<Student> students = dao.selectStudent();

		要使用dao对象：通过读取mybaits的主配置文件，创建SqlSessionFactory对象，使用SqlSessionFactory的openSession()方法 来 获取SqlSession对象，
		然后调用该对象的getMapper();

		做一般项目时，会使用独立连接池替换mybatis默认自带的，把连接池类也交给Spring创建

		主配置文件：
			- 数据库信息
				<environment id="mydev">
		            <transactionManager type="JDBC" />
		            <dataSource type="POOLED">
		                <!--数据库的驱动类名-->
		                <property name="driver" value="com.mysql.jdbc.Driver" />
		                <!--连接数据库的url字符串-->
		                <property name="url"
		                    value="jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8" />
		                <property name="username" value="root" />
		                <property name="password" value="2015022136" />
		            </dataSource>
		        </environment>
		    - mapper文件位置
		    	<mappers>
			        <mapper resource="com/blithe/dao/StudentDao.xml" />
			    </mappers>

	Spring所需要创建的对象	：
		1.独立的连接池类对象，阿里的druid(德鲁伊)连接池
		2.SqlSessionFactory对象
		3.创建出dao

	使用xml的bean标签来创建以上三个对象（参考IDEA-spring- module(ch06-spring-mybatis)）：

4.spring的事务处理
	- 事务的定义
		事务是指一组sql语句的集合，集合中有多条sql语句(insert update Delete ....)，希望这些多个sql语句都能成功执行，
		如果失败，则全部都失败。sql语句执行结果一致，作为整体执行。
	- 事务的使用时机
		当操作涉及到多张表，或者sql语句的同时insert,update,delete需要保证这些语句一致性（同时成功/失败），来保证操作
		符合要求。在java中写程序时，事务大多数用在Service类中业务方法的多个dao中。

	spring提供了一种处理事务的统一模型，用来解决不同数据库的事务处理代码不同的问题。
		- 事务管理器是一个接口包含了他的众多实现类
			1）接口:PlatformTransactionManner,定义了事务重要的方法commit,rollback
			2）实现类：Spring吧每一种数据库访问就的事务处理类都创建好了
				Mybatis访问数据库——DataSourceTransactionManner
				Hibernate访问数据库——HibernateTransactionManner

		- 使用方法
			声明数据库访问技术对于的事务管理器实现类，在spring的配置文件中使用<bean>声明就可以了

		- 事务的内容
			1）事务的隔离界别（4个值）：
			 	* ISOLATION_DEFAULT:待用DB默认的事务隔离级别（MySql的默认是REPEATABLE_READ，Oracle默认是READ_COMMITTED）
			 	下面4个值省略ISOLATION_
			 	* READ_UNCOMMITTED:读未提交。未解决任何并发问题
			 	* READ_COMMITTED:读已提交。解决脏读，存在不可重复读和幻读
			 	* REPEATABLE_READ:可重复读。解决脏读、不可重复读，存在幻读
			 	* SERIALIZABLE:串行话。不存在并发问题

			2）事务的超时时间（表示一个方法最长的执行时间，若方法执行时超过时间则回滚）
				* 单位是秒，整数值，默认是-1.

			3）事务的传播行为（控制业务方法是否有事务，是什么类型的事务）
				* 7个传播行为：表示业务方法调用时，事务在方法之间如何使用
					** PROPAGATION_REQUIRED：方法调用方法，有事务传事务，没事务调用时创建事务
					** PROPAGATION_REQUIRES_NEW：每次新建事务，若已存在事务，将已有事务挂起，等待新事物执行完毕
					** PROPAGATION_SUPPORTS：有事务无事务均不影响
					以上三个需要筸握的
					# PROPAGATION_MANDATORY
					# PROPAGATION_NESTED
					# PROPAGATION_NEVER
					# PROPAGATION_NOT_SUPPORTED

		- 事务提交事务，回滚事务的时间
			1）当业务方法，执行成功，没有异常抛出，当方法执行完毕时Spring在方法执行后调用事务管理器的commit()方法提交
			2）当业务方法抛出运行时异常或Error时，调用事务管理器的roallback()方法进行回滚，当业务方法抛出非运行时异常，则提交事务
				运行时异常定义：RuntimeException 和他的子类都是运行时异常，例如NullPointException，NumberFormatException
				非运行时异常定义：受查异常/编译时异常（在写代码时必须处理的异常，例如IOException，SQLException）

	spring框架中提供的事务处理方案
		- 适合中小项目使用的，注解方案。
			Spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务。
			@Transaction注解是spring框架自带的注解，放在public方法的上面，表示当前方法具有事务。
			可以给注解的属性赋值，表示具体的隔离级别，传播行为。

			使用@Transaction的步骤：
				1）需要声明事务管理器对象
					<bean id="xx" class="DataSourceTransactionManager"><bean/>

				2）开启事务注解驱动，告诉spring框架，使用注解方式管理事务，spring使用aop机制，创建@Transaction所在类代理对象，给
				方法加入事务的功能。spring给业务功能加入事务：在业务方法执行之前，先开启事务，在业务方法执行之后提交或回滚事务，使用
				aop的环绕通知

				3）在方法上加入@Transaction注解

		- 适合大型项目，有很多的类，方法，需要大量的配置事务，使用Aspectj框架功能，在Spring配置文件中声明类，方法需要的事务，这种方
		式方法和事务配置完全分离

			实现步骤（均是在xml配置文件中实现）：
				1）要使用的是Aspectj框架，所以需要加入依赖
					<dependency>
				      <groupId>org.springframework</groupId>
				      <artifactId>spring-aspects</artifactId>
				      <version>5.3.15</version>
				    </dependency>

				2）声明事务管理器对象
					<bean id="xxx" class="... DataSourceTrancactionManager"><bean/>

				3）声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）

				4）配置aop：指定哪些类需要创建代理

5:web项目中怎么使用容器对象。
	在做javase项目有main方法，执行代码就是执行main方法。在main中创建容器对象
	ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
	而在web项目中是在tomcat服务器上运行的，tomcat一启动，项目持续运行

	需求：	
		web项目中容器对象只需要创建一次，把容器对象放入到全局作用域ServletContext中
	实现：
		使用监听器，当全局作用域对象被创建时 创建容器，然后存入ServletContext
		监听器(可以手动创建，也可以使用框架中提供好的ContextLoaderListener)作用：
			1）创建容器对象，执行ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
			2）把容器对象放入到ServletContext,ServletContext.setAttribute(key,ctx);


