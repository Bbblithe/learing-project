1、关于多线程并发环境下，数据的安全问题。
	
	1.1、为什么这个是重点？
		以后在开发中，我们的项目都是运行在服务器当中，
		而服务器已经将线程的定义，线程对象的创建，线程
		的启动等，都已经实现完了。这些代码我们都不需要
		编写。
		最重要的是：你要知道，你编写的程序需要放到一个
		多线程的环境下运行，你更需要关注的是这些数据
		在多线程并发的环境下是否是安全的。（重点：*****）

	1.2、什么时候数据在多线程并发的环境下会存在安全问题呢？
		三个条件：
			条件1:多线程并发
			条件2:有共享数据
			条件3:共享数据有修改的行为。

		满足以上3个条件之后，就会存在线程安全问题。

	1.3、怎么解决线程安全问题呢？
		当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在
		线程安全问题，怎么解决这个问题？
			线程排队执行。（不能并发）。
			用排队执行解决线程安全问题。
			这种机制被称为：线程同步机制。
			专业术语叫做：线程同步，实际上就是线程不能并发了，线程必须排队执行。

		这么解决线程安全问题啊？
			使用“线程同步机制”。				

		线程同步就是线程排队了，线程排队了就会牺牲一部分效率，没办法，数据安全
		第一位，只有数据安全了，我们才可以谈效率。数据不安全，没有效率的事儿。

	1.4、说到线程同步这块，涉及到这两个专业术语：

		异步编程模型：
			线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，
			谁也不需要等谁，这种编程模型叫做：异步编程模型。
			其实就是：多线程并发（效率较高。）

			异步就是并发。

		同步编程模型：	
			线程t1和线程t2，在线程t1执行的时候，必须等待t2线程的执
			行结束，或者说在t2线程执行的时候，必须等待t1线程执行结
			束，两个线程之间发生了等待关系，这就是同步编程模型。
			效率较低。线程排队执行。

			同步就是排队。

2、java中有三大变量

	实例变量：在堆中。

	静态变量：在方法区。
	
	局部变量：在栈中。

	以上三大变量中：
		局部变量永远都不会存在线程安全问题。
		因为局部变量不共享。（一个线程一个栈。）
		局部变量在栈中。所以局部变量永远都不会共享。

	实例变量在堆中，堆只有1个。
	静态变量在方法区中，方法区只有一个。
	堆和方法区都是多线程共享的，所以可能存在线程安全问题。	

	局部变量+常量：不会有线程安全问题。
	成员变量：可能会有线程安全问题。

3、如果使用局部变量的话：
	建议使用：StringBuilder。
	因为局部变量不存在线程安全问题。选择StringBuilder。
	StringBuffer效率比较低。

	ArrayList是非线程安全的。
	Vector是线程安全的。
	HashMap HashSet是非线程安全的。
	Hashtable是线程安全的。

4、总结
	synchronized有三种写法：

		第一种：同步代码块
			灵活
			synchronized(线程共享对象){
				同步代码块;
			}		

		第二种：在实例方法上使用synchronized
			表示共享对象一定是this
			并且同步代码块是整个方法体。

		第三种：在静态方法上使用synchronized
			表示找类锁。
			类锁永远只有1把。
			就算创建了100个对象，那类锁也只有一把。

		对象锁：1个对象1把锁，100个对象100把锁。
		类锁：100个对象，也可能只是1把类锁。	

5、聊一聊，我们以后开发中应该怎么解决线程安全问题？
	是一上来就选择线程同步吗？synchronized
		不是，synchronized会让程序的执行效率降低，用户体验不好。
		系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择
		线程同步机制。		

	第一种方案：尽量使用局部变量代替“实例变量”和“静态变量”。

	第二种方案：如果必须是实例变量，那么可以考虑创建多个对象，这样
	实例变量的内存就不共享了。（一个线程对应一个对象，100个线程对应100个对象，
	对象不共享，就没有数据安全问题了。）

	第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候
	就只能选择synchroized了。线程同步机制。

6、线程这块还有哪些内容呢？列举一下
	6.1、守护线程
		java语言中线程分为两大类：
			一类是：用户线程
			一类是：守护线程（后台线程）
			其中具有代表性的就是：垃圾回收线程（守护线程）。
		守护线程的特点：
			一般守护线程是一个死循环，所有的用户线程只要结束，
			守护线程自动结束。

		注意：主线程main方法是一个用户线程。
		
		守护线程用在什么地方呢？
			每天00：00的时候系统自动备份。
			这个需要使用到定时器，并且我们可以将定时器设置为守护线程。
			一直在那里看着，每到00:00的时候就备份一次。所有的用户线程
			如果结束了，守护线程自动退出，没有必要进行数据备份了。

	6.2、定时器
		定时器的作用：
			间隔特定的时间，执行特定的程序。

			每周要进行银行账户的总账操作。
			每天有进行数据的备份操作。

			在实际的开发中，每隔多久执行一段特定的程序，这种需求是很常见的，
			那么在java中其实可以采用多种方式实现：

				可以使用sleep方法，睡眠，设置睡眠时间，每到这个时间点醒来，执行
				任务。这种方式是最原始的定时器。（比较low）

				在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来用。
				不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持
				定时任务的。

				在实际的开发中，目前使用较多的是Spring框架中提供的SpringTask框架，
				这个框架只要进行简单的配置，就可以完成定时器的任务。

	6.3、实现线程的第三种方式：实现Callalbe接口。（JDK8新特性。）
		这种方式实现的线程可以获取线程的返回值。
		之前讲解的那两种方式是无法获取线程返回值的，因为run方法返回void。

		思考：
			系统委派一个线程去执行一个任务，该线程执行完任务之后，可能
			会有一个执行结果，我们怎么能拿到这个执行结果呢？
				使用第三种方式：实现Callable接口方式
	6.4、关于Object类中的wait和notify方法。（生产者和消费之模式！）

		第一：wait和notify方法不是线程对象的方法，是java中任何一个java对象
		都有的方法，因为这两个方法是Object类中自带的。
			wait方法和notify方法不是通过线程对象调用，
			不是这样的：t.wait()，也不是这样的：t.notify()..不对。

		第二：wait()方法作用？
			Object o = new Object();
			o.wait();

			表示：
				让正在o对象上活动的线程进入等待状态，无期限等待，
				直到被唤醒为止。
				o.wait();方法的调用,会让“当前线程(正在o对象上
				活动的线程)”进入等待状态。

		第三：notify()方法作用？
			Object o = new Object();
			o.notify();

			表示：
				唤醒正在o对象上等待的线程。

			还有一个notifyAll()方法:
				这个方法是唤醒o对象上处于等待的所有线程。		
