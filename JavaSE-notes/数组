1.1、数组的优点和缺点，并且要理解为什么。
    第一：空间存储上，内存地址是连续的。
    第二：每个元素占用的空间大小相同
    第三：知道首元素的内存地址。
    第四：通过下标可以计算出偏移量。
    通过一个数学表达式，就可以快速计算出某个下标为位置上元素的内存地址，
    直接通过内存地址定位，效率非常高。

    优点：检索效率高。
    缺点：随机赠删效率较低，数组无法存储大数据量。
    注意：数组最后一个元素的赠删效率不受影响。

1.2、一维数组的静态初始化和动态初始化
    静态初始化：
        int[ ] arr= {1，2，3，4};
        Object[]obj = {new Object(),new Object(),new Object()}
    动态初始化：
        int[] arr =new int[4]; // 4个长度，每个元素默认值0
        Object[] objs =new Object[4];   //4个长度，每个元素初始值是null

1.3、一维数组的遍历
    for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
    }         

1.4、二维数组的静态初始化和动态初始化
    静态初始化：
        int[][]={
                {1,2,2,34,4},
                {231,1},
                {0}
            };
        Object[][] arr={
                {new Object(),new Object()},
                {new Object(),new Object()},
                {new Object()}
            };  
    动态初始化：
        int[][] arr=new int[10][4];
        Object[][] arr=new Object[4][4];
        Animal[][] arr=new Animal[3][2];
        //  Person类型数组，里面可以存储Person类型的对象，以及Person类型的子类型都可以。
        Person[][] arr=new Person[2][2];
        ...

1.5、二维数组的遍历
    for(int i=0;i<arr.length;i++){  // 外层for循环负责遍历外面的一维数组。
        //里面这个for循环负责遍历二维数组里面的一维数组。
        for(int a=0;a<arr[i].length;i++){
            System.out.print(arr[i][a]);
        }
        //第一个数组里的元素输出完后，进行换行
        System.out.println();
    }              
1.6、main方法上“String[] args”参数的使用(非重点，了解一下，以后一般都是有界面的，用户可以在界面上输入用户名和密码等参数信息)

1.7、数组的拷贝：System.arraycopy()方法的使用
    数组有一特点：长度一旦确定，不可变。
    所以数组长度不够的时候，需要扩容，扩容的机制是：新建一个大数组，
    将小数组中的数据拷贝到大数组，然后小数组对象被垃圾回收。

1.8、对数组中存储引用数据类型的情况，要会画它的内存结构图。