package com.bjpowernode.javase.array;

/**
 * Author:  blithe.xwj
 * Date:    2020/12/11 11:20
 * Description:
 *  选择排序：
 *      每一次从这堆"参与比较的数据当中找"出最小值，
 *      拿着这个最小值和"和参与比较的这堆最前面的元素"交换位置。
 *
 *      选择排序比冒泡排序好在：每一次的交换位置都是有意义的
 *
 *      关键点：选择排序中的关键在于，你怎么找出一堆数据中最小的。
 *          3 1 6 2 5
 *          假设：
 *              第一个3是最小的。
 *              3和1 比较，发现1更小，所以此时的值是1。（记录下这个更小值的下标）
 *              继续拿着1往下比对，1和6进行比对，1仍然是最小的。
 *              继续拿着1往下比对，1和2进行比对，1仍然是最小的。
 *              继续拿着1往下比对，1和5进行比对，1仍然是最小的。
 *
 *              拿着1和最左边的3 交换位置，
 *
 *         3 6 2 5
 *         假设：
 *              第一个3 是最小的。
 *              继续拿着3和右边的6进行比对，发现3还是最小。
 *              继续拿着3和右边的2进行比对，发现2更小，此时最小值为2（记录下此时的index小值坐标）
 *              继续拿着2和右边的5进行比对，发现2还是最小
 *
 *              拿着最2和最左边的3交换位置
 *
 *         6 3 5
 *         假设：
 *              第一个6是最小的。
 *              继续拿着6和左边的3进行比对，发现3是更小的（记录下此时的index最小值位标）
 *              继续拿着3和左边的5进行比对，发现3还是最小
 *
 *              拿着3和最左边的6交换位置
 *
 *         6 5
 *         假设：
 *              第一个6是最小的。
 *              继续拿着6和左边的5进行比对，发现5更小（记录下此时的index才是最小值）
 *
 *              拿着5跟最左边的6交换位置
 *
 *
 *
 */


class SelectSort {
    public static void main(String[] args) {
        int[] arr ={3,1,6,2,5,1,6};
        // 选择排序
        // 5条数据循环4次。（外层循环4次。）

        int count=0;
        int count2=0;
        for(int i =0;i<arr.length-1;i++) {
            // i的值是0，1，2，3
            // i正好是"参加比较的这堆数据中"最左边那个元素的下标。
            // i是一个参与比较的这堆数据的起点下标。
            // 假设i起点下标上的元素是最小值
            int min=i;
            for(int j=i+1;j<arr.length;j++){
               count++;
               if(arr[j]<arr[min]){
                   min=j;
               }
               // 当i和min相等时，表示最初猜测是对的。
               // 当i和min不想等时，表示最初的猜测是错的。有比这个更小的元素
               // 这时候就需要将最小的元素和第一个这个参与比较里的第一个元素进行调换位置。
               if(min!=i){
                   int temp=arr[min];
                   arr[min]=arr[i];
                   arr[i]=temp;
                   count2++;
               }
            }
        }

        // 相对冒泡排序来说，比较的次数没变化，但是交换的次数减少了
        System.out.println("比较次数"+count);
        System.out.println("交换次数："+count2);

        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
}
