maven

第一部分

	一、完成一个java项目，需要做哪些工作
		1.分析项目要做什么？知道项目有哪些组成部分。
		2.设计项目，通过哪些步骤，使用哪些步骤，使用哪些技术，需要多少人，多长的时间。
		3.组建团队，招人，购置设备，服务器，软件，笔记本。
		4.开发人员写代码。 开发人员测试自己写的代码。重复多次的工作。
		5.测试人员，测试项目功能是否符合要求。
			测试开发人员提交的代码 -- 如果测试有问题 -- 需要开发人员修改 -- 再提交代码给测试
			-- 测试人员再测试代码 -- 如果测试有问题 -- 再交给开发人员 -- 开发人员再提交 -- 
			再测试，直到代码通过。

	二、传统开发项目的问题，没有使用maven管理的项目
		1.很多模块，模块之间有关系，手工管理关系，比较繁琐。
		2.需要很多第三方功能，需要很多的jar文件，需要手工从网络中获取各个jar包
		3.管理这个jar的版本，你需要的是mysql15.1.5.jar 就不能使用别的版本的
		4.管理jar文件之间的依赖，你的项目要使用a.jar 需要使用b.jar里面的类。
			必须首先获取到b.jar才可以，然后才能使用a.jar

			a.jar需要b.jar这个关系叫做依赖，或者你的项目中要使用mysql的驱动，也可以叫做项目以来mysql驱动。
			a.class使用b.class， a依赖b类

	三、需要改进项目的开发和管理，需要maven
		1.maven可以管理jar文件
		2.可以自动下载jar和他的文档，源代码
		3.管理jar之间的依赖，a.jar需要b.jar, maven会自动下载b.jar
		4.管理你需要的jar的版本
		5.帮你编译程序，把java编译为class
		6.帮你测试你的代码是否正确
		7.帮你打包文件，形成jar文件，或者war文件
		8.帮你部署项目

	四、构建：项目的构建。
		构建是面向过程的，就是一些步骤，完成项目的代码的编译，测试，运行，打包，部署等等。
		maven所支持的构建包括有：
			1.清理：把之前项目编译的东西删除掉，为新的编译代码做准备。
			2.编译（批量，maven可以同时把成千上百个文件编译成class）：把程序源代码编译为执行代码，java - class 文件 —— 与javac命令不一样，一次只编译一个文件
			3.测试：maven可以执行测试程序代码来验证你的功能是否正确。也是批量操作，maven同时执行多个测试代码，同时测试很多功能。
			4.报告：生成测试结果的文件，测试通过没有。
			5.打包：把你的项目中所有的class文件，配置文件等所有资源放到一个压缩文件中。——这个压缩文件就是项目的结果文件，通常java程序，压缩文件是".jar"拓展名的。
				对于web应用，压缩文件拓展名".war"
			6.安装：把5中生成的文件jar，war安装到本地仓库
			7.部署：把程序安装好可以执行。

	五、maven核心概念：用好maven，了解这些概念
		1⃣POM：一个文件 名称是pom.xml ， pom翻译过来叫做项目对象模型。
			maven 把一个项目当做一个模型使用。控制maven构建项目的过程，管理jar依赖。

		2⃣约定的目录结构：maven项目的目录和文件的位置都是有规定的。

		3⃣坐标：是一个唯一的字符串，用来表示资源的。

		4⃣依赖管理：管理你的项目中可以使用的jar文件

		5⃣仓库管理（了解）：你的资源存放的位置

		6⃣声明周期（了解）：maven工具构建项目的过程，就是生命周期

		7⃣插件和目标（了解）：执行maven构建的时候用的工具是插件

		8⃣继承——后期结合项目
		9⃣集合——后期结合项目

	将maven的使用，先难后易的。难是说使用maven的命令，完成maven的使用，在idea中直接使用maven，代替命令。

	六、maven工具的安装和配置。
		1.需要从maven官网下载maven的安装包
		2.解压安装包，解压到一个目录（非中文目录）
			子目录: 	
				bin：执行程序，主要是mvn.cmd
				conf：maven工具本身的配置——settings.xml
		3.配置环境变量
			在系统的环境变量中，指定一个M2_HOME的名称，指定它的值是maven工具安装目录，bin之前的目录。

		4.验证，新的命令行中，执行mvn -v
			注意：需要配置JAVA_HOME，指定jdk路径

			出现如下内容：maven安装，配置正确 
			Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)
			Maven home: /Users/xuwenjie/Downloads/学习笔记代码/第四阶段/Maven/apache-maven-3.8.1
			Java version: 15, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home
			Default locale: zh_CN_#Hans, platform encoding: UTF-8
			OS name: "mac os x", version: "10.16", arch: "x86_64", family: "mac"

第二部分
	
	1.maven约定的目录结构，约定是大家遵循的一个规则。
		每一个maven项目在磁盘中都是一个文件夹（项目-Hello）		
		Hello/
			---/src
			------/main  			#放你的主程序java代码和配置文件
			----------/java  		#你的程序的包和包中的java文件
			----------/resource  	#你的java程序中要使用的配置文件

			------/test  			#放测试程序代码和文件的（可以没有）	
			----------/java  		#测试程序的包和包中的java文件
			----------/resource  	#测试java程序中要使用的配置文件

			---/pom.xml	 #maven的核心文件（maven项目必须有）
	2.疑问： mvn compile 编译src/main目录下的所有的java文件。
		* 为什么要下载
			maven工具执行的操作是需要很多的插件（java类--jar文件）完成的

		* 下载什么东西了
			jar文件--叫做插件---插件是用来完成某些功能

		* 下载的这个东西存放在哪里
			不知道

		* 执行mvn compile , 结果是在项目的根目录下生成target目录（结果目录），maven编译的java程序，最后的class文件都放在target目录中
		
		* 设置本机存放资源的目录文件：
			1）修改maven的配置文件，maven安装目录/conf/setting.xml
			  先备份

			2）修改localRepository 指定你的目录（不要使用中文目录）

	3.仓库
		
		* 仓库是什么：仓库是存放东西的
			> maven使用的插件(各种jar)
			> 我项目使用的jar(第三方的工具)
		
		* 仓库的分类
			> 本地仓库：就是你的个人计算机上的文件夹，存放各种jar
			> 远程仓库：在互联网上的，使用网络才能使用的仓库
				1) 中央仓库：最权威的，所有的开发人员都共享使用一个集中的仓库
					https://repo.maven.apache.org —— 中央仓库
				2) 中央仓库的镜像：就是中央仓库的备份，在各大洲，重要的城市都有镜像

				3）私服：在公司的内部，在局域网中使用的，不是对外使用的。

		* 仓库的使用，maven仓库的使用不需要人为参与。
			开发人员需要使用mysql驱动---> maven首先查本地仓库 ---> 私服 ---> 镜像 ---> 中央仓库

	4.pom：项目对象模型，是一个pom.xml文件
		1）坐标：唯一值，在互联网中唯一标识一个项目的
			<groupId>公司域名的倒写</groupId>
  			<artifactId>自定义项目名称</artifactId>
  			<version>自定版本号</version>

  		https://mvnrepository.com 搜索使用的中央仓库，使用groupID 或者artofactId作为搜索条件

  		2）packaging：打包后压缩文件的拓展名，默认是jar，web应用是war
  		packaging ，可以不写 默认是jar

  		3）依赖:dependendies 和dependency ， 相当于是java代码中的import
  		你的项目中要使用的各种资源说明，比如我的项目中要使用mysql驱动

  		4）properties：设置属性

  		5）build：maven在进行项目的构建时，配件信息，例如编译java代码使用的jdk的版本

  	5.maven声明周期，maven的命令，maven的插件
  		maven的生命周期：就是maven的构建项目的过程，清理，编译，测试，报告，打包，安装，部署。
  		maven的命令：maven独立使用，通过命令，完成maven生命周期的执行。maven可以使用命令，完成项目的清理，编译，测试等等
  		maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件，一些类。

  		1）单元测试（测试方法）：用的是junit ，junit谁一个专门测试的框架（工具）。
  			junit测试的内容：测试的是类中的方法，每一方法都是独立测试的。
  			方法是测试的基本单元（单元）。

  			maven借助单元测试，批量的测试你类中的大量方法是否符合预期的。
  		2）使用步骤：
  			* 加入依赖，在pom.xml加入单元测试依赖
  			<!-- https://mvnrepository.com/artifact/junit/junit -->
			<dependency>
			    <groupId>junit</groupId>
			    <artifactId>junit</artifactId>
			    <version>4.12</version>
			    <scope>test</scope>
			</dependency>

			* 在maven项目中的src/test/java目录下，创建测试程序。
				推荐的创建类和方法的提示：
					- 测试类的名称 是Test + 你要测试的类名
					- 测试点的方法名称是Test + 方法名称

				例如你要测试HelloMaven：
					创建测试类TestHelloMaven
					@Test
					public void testAdd(){
						测试HelloMaven的add方法是否正确
					}

					其中testAdd叫做测试方法，它的定义规则：
						# 方法是public，必须
						# 方法没有返回值，必须
						# 方法名称是自定义的 -> Test + 方法名称，推荐
						# 在方法的上面加入 @Test

		3) mvn comfile
			编译main/java/目录下的java 为class文件，同时把class拷贝到target/class目录下面，把main/resource目录下的所有文件都拷贝到target/classes目录下

第三部分：
	1.在idea中设置maven，让idea和maven结合使用。idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。
	使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道maven安装位置信息。

	配置的入口 Intellij IDEA --- Perferences --- Build,Execution,Deployment 
	--- Build Tools --- Maven：
		Maven Home directory:maven的安装目录
		User Setting File: 就是maven安装目录conf/setting.xml 配置文件
		Local repository: 本机仓库位置

	---	Build Tools --- Maven --- Runner
		VM Options : -DarchetypeCatalog=inernal  // 意义：maven项目创建时，会联网下载模版文件，比较大，使用 arch....ernal指令可以不用下载，创建maven项目速度很慢
		JRE:你项目的jdk

	2.使用模版创建项目
		1）maven-archetype-quickstart : 普通的java项目
		2）maven-archetype-webapp : web工程

第四部分：
	1.依赖范围，使用scope表示的。
		scope的值有 compile ，test ， provided
		默认是compile
		scope：表示依赖使用的范围，也就是在maven构建项目的不同阶段起作用。
			maven构建项目   清理，编译，测试，打包，安装，部署 这些过程（阶段）

		junit的范围是 test 
		<dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>4.11</version>
	      <scope>test</scope>
	    </dependency>

	    <dependency>
	      <groupId>a</groupId>
	      <artifactId>b</artifactId>  b.jar
	      <version>4.1</version>
	      <scope>compile</scope>
	    </dependency>

	    <dependency>
	      <groupId>jakarta.servlet</groupId>
	      <artifactId>jakarta.servlet-api</artifactId>
	      <version>5.0.0</version>
	      <scope>provided</scope> 提供者
	    </dependency>
