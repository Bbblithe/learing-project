#include <iostream>
using namespace std;

int main(){
    int a = 10;
    int b = 10;
    int c = 20;

    // 1、const修饰指针——常量指针
    // 特点：指针的指向可以修改，但是指针指向的值不可以改
    const int* p1 = &a; // 常量指针

    p1 = &b;
    cout << "p1指向空间的值是" << *p1 << ",p1的地址是" << p1 << endl;
    cout << "a的值是" << a << "，a的地址是" << &a << endl;
    cout << "b的值是" << b << "，a的地址是" << &b << endl;
    p1 = &c; // 可以修改指向，即使指向的值不一样。
    cout << "p1指向空间的值是" << *p1 << ",p1的地址是" << p1 << endl;

    // 指针指向的值不能修改
    //*p = 30; // 不可以直接修改指向空间的值！

    cout << "*********************************" << endl;

    // 2、const修饰常量——指针常量
    // 特点：指针的指向不可以改，但是指针指向的值可以修改
    int* const p2 = &a;
    *p2 = 20 ;
    cout << "p2指向空间的值是" << *p2 << ",p2的地址是" << p2 << endl;
    cout << "a的值是" << a << "，a的地址是" << &a << endl;
    cout << "b的值是" << b << "，a的地址是" << &b << endl;
    cout << "p2指向空间的值是" << *p2 << ",p的地址是" << p2 << endl;

    // 指针的指向不可以改，也就是地址不可以直接修改
    // p2 = &b;

    // 3、const既修饰指针，又修饰常量
    // 特点：指针的指向和指针指向的值都不可以改
    const int* const p3 = &a ;

    // 均不允许修改
    // *p3 = 20;
    // p3 = &b;

    return 0;
}
